.TH po-util 1 "16 Dec 2016" "Darwin" "Particle Offline Utility"
.IX lsusb
.SH NAME
po-util \- The Ultimate Local Particle Experience for Linux and macOS
.SH SYNOPSIS

.B po
DEVICE_TYPE COMMAND DEVICE_NAME

.B po
DFU_COMMAND

.B po
install [full_install_path]

.B po
library LIBRARY_COMMAND
.SH DESCRIPTION
Particle Offline Utility, called po-util or
.B po
is a script for installing and using the Particle Toolchain on Linux and macOS.  It simplifies and accelerates the local building experience for Particle devices by providing useful commands and utilities to improve the development workflow.

Notable features include: local building, firmware uploading using dfu-util, and library management.

The goal of po-util is provide the best local Particle experience possible.

.SH OPTIONS

.TP
.B install
Download the tools needed for development. Requires sudo. You can also re-install with this command. You can optionally install to an alternate location by specifying [full_install_path].

Example:
.B  po
install ~/particle

By default, the Particle firmware is installed in ~/github.

.TP
.B build
Locally compile code in "firmware" subdirectory using gcc-arm.

.TP
.B flash
Compile code and flash to device using dfu-util.

NOTE: You can supply another argument to "build" and "flash" to specify which firmware directory to compile.

Example:

.B  po
photon flash photon-firmware/

.TP
.B clean
Refresh all code (Run after switching device or directory).

.TP
.B init
Initialize your current working directory as a po-util project.  You can optionally supply another argument to specify which platform your project if for. The purpose of this argument is to generate a ".atom-build.yml" file which provides keyboard shortcuts for using po-util within Atom. More information on the shortcuts can be found below.

Example:

.B  mkdir
somePhotonProject

.B  cd
somePhotonProject

.B  po
init photon

.TP
.B update
Download the latest releases of Particle firmware, particle-cli and po-util.

.TP
.B upgrade
Recompile and update the system firmware on a device.

.TP
.B ota
Upload code Over The Air using particle-cli.

NOTE: You can sequentially flash code to several devices by passing the -m or --multi argument to "ota".

Example:

.B  po
photon ota -m product-firmware/

NOTE: This is different from the product firmware update feature in the Particle Console because it updates the firmware of devices one at a time and only if the devices are online when the command is run.

.TP
.B serial
Monitor a device's serial output using
.B screen
(Close with CRTL-A +D)

.TP
.B config
Select Particle firmware branch and DFU trigger baud rate.

.TP
.B setup
Get a device's ID and connect it Wi-Fi. Manually claim it after.

.TP
.B lib | library
Library manager command for po-util.

.SH LIBRARY MANAGER

.TP
.B po lib
The library manager makes it easy to use Particle libraries hosted on GitHub with your projects.  It does this by keeping the library repositories in
.B ~/.po-util/lib
and creating symbolic links to the relevant library files in your projects.  It keeps track of which libraries are used in a project in a
.B libs.txt
file in every project. It has many more features which are listed below.

.SH OPTIONS

.TP
.B get | install
Download a Particle Library from GitHub and optionally name it. If run with no arguments, libraries listed in a "libs.txt" are installed.

Example of getting a library from Git:

.B  po lib
get https://github.com/user/libraryName libraryName

.TP
.B add | import
Add a downloaded library to a po-util project. Libraries are added in the firmware directory as soft links. Additionally, the library information is added to "libs.txt" so that you can keep track of your libraries and restore them in the future.

Example adding an installed library to a project:

.B  po lib
add libraryName

.TP
.B rm | remove
Remove a library from a po-util project. Just the soft links are deleted.

Example:

.B  po lib
rm libraryName

.TP
.B create
Create other libraries from other C++ files in a library. Useful for when multiple libraries are packaged together and need to be separated.

Example:

.B  cd
~/.po-util/lib/someLibWithOtherLibsInside

.B  po lib
create

.TP
.B purge
Uninstall (delete) a library from ~/.po-util/lib

Example:

.B  po lib
purge someLibrary

.TP
.B ls | list
List all downloaded libraries. Libraries are kept in:

.B ~/.po-util/lib

.TP
.B setup
A combination of
.B po lib install
and
.B po lib add

Libraries listed in "libs.txt" are installed and symlinks are created.

.TP
.B clean
All symlinks in the project are removed, but "libs.txt" is untouched.  This is ideal for releasing you project, not having to have the library source files in your "firmware" directory, but rather just a list that people can "po lib setup" to download your project's dependencies.

.TP
.B pack | package | export
Copy all of your source code and libraries used into a packaged (exported) "packaged-firmware" directory inside of your project.  Useful for sharing your project with so that it can be easily used by other users that do not have po-util.

.TP
.B update | refresh
Update all of your libraries.

.SH KEYBOARD SHORTCUTS

The following shortcuts allow you to run common po-util commands quickly while using Atom. This requires the "build" package for Atom.  Get it with: "apm install build"

.TP
.B build
CTRL-ALT-1

.TP
.B flash
CTRL-ALT-2

.TP
.B clean
CTRL-ALT-3

.TP
.B DFU
CTRL-ALT-4

.TP
.B OTA
CTRL-ALT-5

.SH NOTES
To build locally for Raspberry Pi you must have docker installed.

.SH CREDITS
Created for the Particle Community
by Nathan Robinson

Some elements were inspired by GPL projects and StackOverflow threads.

.SH "AUTHORS"
Nathan D. Robinson <nrobinson2000@me.com>

.fi
